{
  "category": "MEV",
  "description": "MEV design patterns for blockchain and Web3 applications",
  "patterns": [
    {
      "id": "flashbots-protect",
      "name": "Flashbots Protect Pattern",
      "category": "MEV",
      "description": "Private mempool to prevent front-running and sandwich attacks. Transactions sent directly to miners.",
      "when_to_use": [
        "Large swaps",
        "MEV-sensitive transactions",
        "front-running protection"
      ],
      "benefits": [
        "MEV protection",
        "no failed transaction costs",
        "sandwich attack prevention"
      ],
      "drawbacks": [
        "Slower execution (wait for next block)",
        "centralized relayer"
      ],
      "use_cases": [
        "Large DEX trades",
        "NFT mints",
        "auction participation"
      ],
      "complexity": "Medium",
      "tags": [
        "mev",
        "flashbots",
        "front-running",
        "protection",
        "private-mempool"
      ],
      "examples": {
        "typescript": {
          "language": "typescript",
          "code": "import { FlashbotsBundleProvider } from '@flashbots/ethers-provider-bundle';\n\nconst flashbotsProvider = await FlashbotsBundleProvider.create(\n  provider,\n  authSigner,\n  'https://relay.flashbots.net'\n);\n\n// Send transaction via Flashbots\nconst signedBundle = await flashbotsProvider.signBundle([\n  { signer: wallet, transaction: tx }\n]);\n\nconst simulation = await flashbotsProvider.simulate(signedBundle, targetBlock);\nconst bundleSubmission = await flashbotsProvider.sendRawBundle(signedBundle, targetBlock);"
        }
      }
    },
    {
      "id": "mev-boost-pattern",
      "name": "MEV-Boost Pattern",
      "category": "MEV",
      "description": "Separate block building from proposing. Validators use relays to source blocks from builders.",
      "when_to_use": [
        "Validator revenue optimization post-Merge",
        "MEV extraction"
      ],
      "benefits": [
        "Increased validator rewards (30-50%)",
        "competitive builder market"
      ],
      "drawbacks": [
        "Builder centralization risk",
        "relay trust",
        "censorship potential"
      ],
      "use_cases": [
        "Ethereum validators",
        "MEV optimization",
        "block building"
      ],
      "complexity": "Very High",
      "tags": [
        "mev",
        "mev-boost",
        "ethereum",
        "validators",
        "block-building"
      ],
      "examples": {
        "solidity": {
          "language": "solidity",
          "code": "// MEV-Boost is off-chain infrastructure\n// Validators run MEV-Boost sidecar:\n// 1. Validator requests block from relay\n// 2. Relay aggregates bids from builders\n// 3. Validator signs highest-paying block\n// 4. Block propagated to network\n\n// On-chain impact: higher validator rewards via priority fees & MEV"
        }
      }
    },
    {
      "id": "mev-share-pattern",
      "name": "MEV-Share Pattern",
      "category": "MEV",
      "description": "Users capture their own MEV through orderflow auctions. Searchers bid for backrun rights.",
      "when_to_use": [
        "MEV redistribution",
        "user orderflow monetization"
      ],
      "benefits": [
        "90% of backrun profit to users",
        "fair MEV distribution"
      ],
      "drawbacks": [
        "Complex mechanism",
        "solver dependency",
        "partial information leakage"
      ],
      "use_cases": [
        "DEX trades",
        "user transaction optimization",
        "MEV kickbacks"
      ],
      "complexity": "Very High",
      "tags": [
        "mev",
        "mev-share",
        "orderflow",
        "auction",
        "redistribution"
      ],
      "examples": {
        "typescript": {
          "language": "typescript",
          "code": "// MEV-Share: Users send transactions to Flashbots\n// Flashbots creates \"hint\" with partial tx info\n// Searchers bid to backrun user's tx\n// User receives 90% of backrun profit\n\nconst mevShareClient = new MevShareClient(network, authSigner);\n\nawait mevShareClient.sendTransaction(tx, {\n  hints: {\n    calldata: true,  // Share calldata\n    logs: true,      // Share event logs\n    functionSelector: true\n  },\n  maxBlockNumber: currentBlock + 25,\n  builders: ['flashbots', 'beaverbuild']\n});"
        }
      }
    }
  ]
}