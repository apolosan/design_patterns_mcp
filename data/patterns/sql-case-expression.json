{
  "id": "sql-case-expression",
  "name": "CASE Expression Pattern",
  "category": "Data Query",
  "description": "Implements conditional logic within SQL queries using CASE expressions. Allows data transformation, categorization, and dynamic value assignment based on conditions. Supports both simple and searched CASE formats for flexible conditional processing.",
  "when_to_use": "[\"Need conditional value transformation\",\"Categorize data into groups\",\"Implement business logic in queries\",\"Handle NULL or missing values\",\"Create pivot-like transformations\",\"Dynamic sorting with ORDER BY\"]",
  "benefits": "[\"Keeps logic in database layer\",\"Avoids multiple queries for conditional data\",\"Improves performance vs application-side logic\",\"Enables complex data transformations\",\"Works in SELECT, WHERE, ORDER BY, HAVING\"]",
  "drawbacks": "[\"Complex CASE statements reduce readability\",\"Can be hard to maintain\",\"May impact query performance if overused\",\"Limited error handling capabilities\"]",
  "use_cases": "[\"Data categorization and bucketing\",\"Status translation (codes to descriptions)\",\"Conditional aggregations\",\"Dynamic sorting logic\",\"NULL value handling\",\"Creating calculated columns\"]",
  "complexity": "Medium",
  "tags": ["sql", "case", "conditional-logic", "transformation", "business-logic", "coalesce", "isnull"],
  "examples": {
    "tsql": {
      "description": "T-SQL CASE expressions with simple and searched formats plus COALESCE and ISNULL",
      "code": "-- Simple CASE (equality comparison)\nSELECT \n  OrderID,\n  OrderStatus,\n  CASE OrderStatus\n    WHEN 'P' THEN 'Pending'\n    WHEN 'S' THEN 'Shipped'\n    WHEN 'D' THEN 'Delivered'\n    WHEN 'C' THEN 'Cancelled'\n    ELSE 'Unknown'\n  END AS StatusDescription\nFROM Orders;\n\n-- Searched CASE (complex conditions)\nSELECT \n  ProductID,\n  ProductName,\n  Price,\n  CASE \n    WHEN Price < 10 THEN 'Budget'\n    WHEN Price >= 10 AND Price < 50 THEN 'Standard'\n    WHEN Price >= 50 AND Price < 100 THEN 'Premium'\n    WHEN Price >= 100 THEN 'Luxury'\n    ELSE 'Uncategorized'\n  END AS PriceCategory,\n  CASE \n    WHEN QuantityInStock = 0 THEN 'Out of Stock'\n    WHEN QuantityInStock < 10 THEN 'Low Stock'\n    WHEN QuantityInStock >= 10 THEN 'In Stock'\n  END AS StockStatus\nFROM Products;\n\n-- CASE in ORDER BY for custom sorting\nSELECT CustomerID, CustomerName, Region, Priority\nFROM Customers\nORDER BY \n  CASE Region\n    WHEN 'North' THEN 1\n    WHEN 'South' THEN 2\n    WHEN 'East' THEN 3\n    WHEN 'West' THEN 4\n    ELSE 5\n  END,\n  Priority DESC,\n  CustomerName;\n\n-- CASE in UPDATE statement\nUPDATE Products\nSET DiscountPercentage = \n  CASE \n    WHEN CategoryID = 1 THEN 0.15  -- 15% for category 1\n    WHEN CategoryID = 2 AND Price > 100 THEN 0.20\n    WHEN QuantityInStock > 1000 THEN 0.10\n    ELSE 0.05  -- Default 5%\n  END\nWHERE IsActive = 1;\n\n-- CASE in aggregation\nSELECT \n  CustomerID,\n  SUM(CASE WHEN OrderStatus = 'D' THEN OrderTotal ELSE 0 END) AS DeliveredRevenue,\n  SUM(CASE WHEN OrderStatus = 'C' THEN OrderTotal ELSE 0 END) AS CancelledRevenue,\n  COUNT(CASE WHEN OrderStatus = 'P' THEN 1 END) AS PendingCount\nFROM Orders\nGROUP BY CustomerID;\n\n-- COALESCE (returns first non-NULL value)\nSELECT \n  EmployeeID,\n  COALESCE(MobilePhone, HomePhone, WorkPhone, 'No Phone') AS ContactPhone,\n  COALESCE(Email, 'no-email@company.com') AS ContactEmail\nFROM Employees;\n\n-- ISNULL (T-SQL specific, replaces NULL with default)\nSELECT \n  ProductID,\n  ProductName,\n  ISNULL(Description, 'No description available') AS Description,\n  ISNULL(Weight, 0.0) AS Weight\nFROM Products;\n\n-- NULLIF (returns NULL if values are equal)\nSELECT \n  SalesAmount,\n  Quantity,\n  SalesAmount / NULLIF(Quantity, 0) AS PricePerUnit  -- Avoids divide by zero\nFROM OrderDetails;"
    },
    "postgresql": {
      "description": "PostgreSQL CASE expressions with advanced features",
      "code": "-- Basic CASE expression\nSELECT \n  order_id,\n  total_amount,\n  CASE \n    WHEN total_amount < 50 THEN 'Small'\n    WHEN total_amount < 200 THEN 'Medium'\n    WHEN total_amount < 1000 THEN 'Large'\n    ELSE 'Enterprise'\n  END AS order_size\nFROM orders;\n\n-- CASE with NULL handling\nSELECT \n  employee_id,\n  first_name,\n  last_name,\n  CASE \n    WHEN termination_date IS NULL THEN 'Active'\n    WHEN termination_date <= CURRENT_DATE THEN 'Terminated'\n    ELSE 'Pending Termination'\n  END AS employment_status,\n  COALESCE(department, 'Unassigned') AS department\nFROM employees;\n\n-- CASE in WHERE clause\nSELECT product_id, product_name, category, price\nFROM products\nWHERE \n  CASE \n    WHEN category = 'Electronics' THEN price > 500\n    WHEN category = 'Clothing' THEN price > 50\n    ELSE price > 10\n  END;\n\n-- CASE with ARRAY and JSON (PostgreSQL specific)\nSELECT \n  user_id,\n  preferences,\n  CASE \n    WHEN preferences->>'theme' = 'dark' THEN 'Dark Mode User'\n    WHEN preferences->>'theme' = 'light' THEN 'Light Mode User'\n    ELSE 'Default Theme User'\n  END AS theme_preference,\n  CASE \n    WHEN 'premium' = ANY(subscriptions) THEN 'Premium'\n    WHEN 'standard' = ANY(subscriptions) THEN 'Standard'\n    ELSE 'Free'\n  END AS subscription_tier\nFROM users;\n\n-- GREATEST and LEAST (alternative to CASE for max/min)\nSELECT \n  product_id,\n  base_price,\n  sale_price,\n  LEAST(base_price, sale_price) AS effective_price,\n  GREATEST(view_count, 0) AS safe_view_count\nFROM products;\n\n-- FILTER clause (alternative to CASE in aggregations)\nSELECT \n  customer_id,\n  COUNT(*) AS total_orders,\n  COUNT(*) FILTER (WHERE status = 'completed') AS completed_orders,\n  SUM(amount) FILTER (WHERE status = 'completed') AS completed_revenue,\n  AVG(amount) FILTER (WHERE status = 'pending') AS avg_pending_amount\nFROM orders\nGROUP BY customer_id;"
    },
    "mysql": {
      "description": "MySQL CASE expressions and IF function alternatives",
      "code": "-- CASE expression\nSELECT \n  customer_id,\n  total_purchases,\n  CASE \n    WHEN total_purchases >= 10000 THEN 'VIP'\n    WHEN total_purchases >= 5000 THEN 'Gold'\n    WHEN total_purchases >= 1000 THEN 'Silver'\n    ELSE 'Bronze'\n  END AS customer_tier\nFROM customer_summary;\n\n-- IF function (MySQL alternative to simple CASE)\nSELECT \n  product_id,\n  stock_quantity,\n  IF(stock_quantity > 0, 'Available', 'Out of Stock') AS availability,\n  IF(is_featured = 1, 'Featured', 'Regular') AS product_type\nFROM products;\n\n-- Nested IF (use CASE for better readability)\nSELECT \n  order_id,\n  delivery_days,\n  IF(delivery_days <= 1, 'Express',\n    IF(delivery_days <= 3, 'Fast',\n      IF(delivery_days <= 7, 'Standard', 'Economy')\n    )\n  ) AS shipping_method\nFROM shipments;\n\n-- CASE in aggregation\nSELECT \n  DATE_FORMAT(order_date, '%Y-%m') AS month,\n  SUM(CASE WHEN payment_method = 'credit_card' THEN amount ELSE 0 END) AS cc_revenue,\n  SUM(CASE WHEN payment_method = 'paypal' THEN amount ELSE 0 END) AS paypal_revenue,\n  SUM(CASE WHEN payment_method = 'bank_transfer' THEN amount ELSE 0 END) AS bank_revenue,\n  COUNT(CASE WHEN order_status = 'cancelled' THEN 1 END) AS cancelled_count\nFROM orders\nGROUP BY DATE_FORMAT(order_date, '%Y-%m');\n\n-- COALESCE for NULL handling\nSELECT \n  user_id,\n  COALESCE(nickname, username, CONCAT('User', user_id)) AS display_name,\n  COALESCE(last_login, created_at) AS last_activity\nFROM users;\n\n-- IFNULL (MySQL specific, similar to ISNULL)\nSELECT \n  product_id,\n  IFNULL(discount_price, regular_price) AS final_price,\n  IFNULL(description, 'No description') AS description\nFROM products;\n\n-- NULLIF for avoiding division by zero\nSELECT \n  order_id,\n  total_amount,\n  item_count,\n  total_amount / NULLIF(item_count, 0) AS avg_item_price\nFROM order_summary;"
    }
  }
}
