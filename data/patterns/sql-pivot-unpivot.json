{
  "id": "sql-pivot-unpivot",
  "name": "PIVOT and UNPIVOT Pattern",
  "category": "Data Query",
  "description": "Transforms data between row-based and column-based formats. PIVOT rotates rows into columns for cross-tab reports, while UNPIVOT normalizes column data into rows. Essential for data warehousing, reporting, and transforming data between normalized and denormalized forms.",
  "when_to_use": "[\"Create cross-tabulation reports\",\"Transform time-series data to columnar format\",\"Generate matrix-style reports\",\"Normalize wide tables into long format\",\"Prepare data for specific visualization needs\",\"Convert between OLTP and OLAP formats\"]",
  "benefits": "[\"Simplifies cross-tab reporting\",\"Reduces need for complex CASE statements\",\"Improves report readability\",\"Enables dynamic column generation\",\"Essential for data transformation pipelines\"]",
  "drawbacks": "[\"Can be memory-intensive\",\"Static PIVOT requires known column values\",\"Complex syntax for beginners\",\"May require dynamic SQL for flexibility\",\"Not all databases support PIVOT/UNPIVOT\"]",
  "use_cases": "[\"Sales by month/quarter reports\",\"Product comparison matrices\",\"Demographic cross-tabulations\",\"Survey response analysis\",\"Normalizing spreadsheet imports\",\"ETL data transformations\"]",
  "complexity": "Medium",
  "tags": ["sql", "pivot", "unpivot", "cross-tab", "data-transformation", "reshape", "reporting"],
  "examples": {
    "tsql": {
      "description": "T-SQL PIVOT and UNPIVOT with static and dynamic approaches",
      "code": "-- Sample data setup\nCREATE TABLE #MonthlySales (\n  Year INT,\n  Month VARCHAR(10),\n  SalesAmount DECIMAL(10,2)\n);\n\n-- Static PIVOT: Months as columns\nSELECT *\nFROM (\n  SELECT Year, Month, SalesAmount\n  FROM #MonthlySales\n) AS SourceData\nPIVOT (\n  SUM(SalesAmount)\n  FOR Month IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])\n) AS PivotTable;\n\n-- PIVOT with multiple aggregations\nSELECT *\nFROM (\n  SELECT Category, Product, SalesQuantity, Revenue\n  FROM Sales\n) AS SourceData\nPIVOT (\n  SUM(SalesQuantity)\n  FOR Category IN ([Electronics], [Clothing], [Food])\n) AS QuantityPivot;\n\n-- Dynamic PIVOT (columns determined at runtime)\nDECLARE @columns NVARCHAR(MAX), @sql NVARCHAR(MAX);\n\n-- Build column list dynamically\nSELECT @columns = STUFF((\n  SELECT DISTINCT ',' + QUOTENAME(Month)\n  FROM #MonthlySales\n  ORDER BY ',' + QUOTENAME(Month)\n  FOR XML PATH(''), TYPE\n).value('.', 'NVARCHAR(MAX)'), 1, 1, '');\n\n-- Build and execute dynamic PIVOT query\nSET @sql = N'\nSELECT Year, ' + @columns + '\nFROM (\n  SELECT Year, Month, SalesAmount\n  FROM #MonthlySales\n) AS SourceData\nPIVOT (\n  SUM(SalesAmount)\n  FOR Month IN (' + @columns + ')\n) AS PivotTable\nORDER BY Year;';\n\nEXEC sp_executesql @sql;\n\n-- UNPIVOT: Convert columns to rows\nCREATE TABLE #QuarterlySales (\n  Year INT,\n  Q1 DECIMAL(10,2),\n  Q2 DECIMAL(10,2),\n  Q3 DECIMAL(10,2),\n  Q4 DECIMAL(10,2)\n);\n\nSELECT Year, Quarter, SalesAmount\nFROM #QuarterlySales\nUNPIVOT (\n  SalesAmount FOR Quarter IN (Q1, Q2, Q3, Q4)\n) AS UnpivotTable;\n\n-- UNPIVOT alternative using CROSS APPLY\nSELECT \n  Year,\n  Quarter,\n  SalesAmount\nFROM #QuarterlySales\nCROSS APPLY (\n  VALUES \n    ('Q1', Q1),\n    ('Q2', Q2),\n    ('Q3', Q3),\n    ('Q4', Q4)\n) AS V(Quarter, SalesAmount);\n\n-- Complex PIVOT with grouping\nSELECT \n  Region,\n  [2022], [2023], [2024]\nFROM (\n  SELECT \n    Region,\n    YEAR(OrderDate) AS OrderYear,\n    TotalAmount\n  FROM Orders\n) AS SourceData\nPIVOT (\n  SUM(TotalAmount)\n  FOR OrderYear IN ([2022], [2023], [2024])\n) AS YearlyPivot\nORDER BY Region;\n\n-- PIVOT for product comparison matrix\nSELECT \n  ProductName,\n  [Price], [Weight], [Dimensions], [Color]\nFROM (\n  SELECT ProductName, AttributeName, AttributeValue\n  FROM ProductAttributes\n) AS SourceData\nPIVOT (\n  MAX(AttributeValue)\n  FOR AttributeName IN ([Price], [Weight], [Dimensions], [Color])\n) AS ProductMatrix;"
    },
    "postgresql": {
      "description": "PostgreSQL pivoting using crosstab extension and aggregation techniques",
      "code": "-- Enable tablefunc extension for crosstab\nCREATE EXTENSION IF NOT EXISTS tablefunc;\n\n-- Using crosstab for PIVOT-like behavior\nSELECT *\nFROM crosstab(\n  'SELECT year, month, sales_amount\n   FROM monthly_sales\n   ORDER BY year, month',\n  'SELECT DISTINCT month FROM monthly_sales ORDER BY month'\n) AS ct(\n  year INT,\n  jan DECIMAL,\n  feb DECIMAL,\n  mar DECIMAL,\n  apr DECIMAL,\n  may DECIMAL,\n  jun DECIMAL,\n  jul DECIMAL,\n  aug DECIMAL,\n  sep DECIMAL,\n  oct DECIMAL,\n  nov DECIMAL,\n  dec DECIMAL\n);\n\n-- Manual PIVOT using FILTER (PostgreSQL 9.4+)\nSELECT \n  year,\n  SUM(sales_amount) FILTER (WHERE month = 'Jan') AS jan,\n  SUM(sales_amount) FILTER (WHERE month = 'Feb') AS feb,\n  SUM(sales_amount) FILTER (WHERE month = 'Mar') AS mar,\n  SUM(sales_amount) FILTER (WHERE month = 'Apr') AS apr,\n  SUM(sales_amount) FILTER (WHERE month = 'May') AS may,\n  SUM(sales_amount) FILTER (WHERE month = 'Jun') AS jun,\n  SUM(sales_amount) FILTER (WHERE month = 'Jul') AS jul,\n  SUM(sales_amount) FILTER (WHERE month = 'Aug') AS aug,\n  SUM(sales_amount) FILTER (WHERE month = 'Sep') AS sep,\n  SUM(sales_amount) FILTER (WHERE month = 'Oct') AS oct,\n  SUM(sales_amount) FILTER (WHERE month = 'Nov') AS nov,\n  SUM(sales_amount) FILTER (WHERE month = 'Dec') AS dec\nFROM monthly_sales\nGROUP BY year\nORDER BY year;\n\n-- UNPIVOT using UNNEST\nWITH quarterly_sales AS (\n  SELECT \n    year,\n    ARRAY[q1, q2, q3, q4] AS quarters,\n    ARRAY['Q1', 'Q2', 'Q3', 'Q4'] AS quarter_names\n  FROM sales_by_quarter\n)\nSELECT \n  year,\n  quarter_names[idx] AS quarter,\n  quarters[idx] AS sales_amount\nFROM quarterly_sales,\n  LATERAL UNNEST(quarters) WITH ORDINALITY AS u(amount, idx);\n\n-- UNPIVOT using LATERAL JOIN\nSELECT \n  product_id,\n  attribute_name,\n  attribute_value\nFROM products\nCROSS JOIN LATERAL (\n  VALUES \n    ('price', price::TEXT),\n    ('weight', weight::TEXT),\n    ('color', color),\n    ('size', size)\n) AS attrs(attribute_name, attribute_value)\nWHERE attribute_value IS NOT NULL;\n\n-- Dynamic PIVOT using JSON aggregation\nSELECT \n  year,\n  json_object_agg(month, sales_amount) AS monthly_sales\nFROM monthly_sales\nGROUP BY year;\n\n-- PIVOT with multiple aggregations\nSELECT \n  category,\n  COUNT(*) FILTER (WHERE region = 'North') AS north_count,\n  SUM(revenue) FILTER (WHERE region = 'North') AS north_revenue,\n  COUNT(*) FILTER (WHERE region = 'South') AS south_count,\n  SUM(revenue) FILTER (WHERE region = 'South') AS south_revenue,\n  COUNT(*) FILTER (WHERE region = 'East') AS east_count,\n  SUM(revenue) FILTER (WHERE region = 'East') AS east_revenue,\n  COUNT(*) FILTER (WHERE region = 'West') AS west_count,\n  SUM(revenue) FILTER (WHERE region = 'West') AS west_revenue\nFROM sales\nGROUP BY category;"
    },
    "mysql": {
      "description": "MySQL pivoting using conditional aggregation",
      "code": "-- Manual PIVOT using CASE statements (MySQL doesn't have native PIVOT)\nSELECT \n  year,\n  SUM(CASE WHEN month = 'Jan' THEN sales_amount ELSE 0 END) AS jan,\n  SUM(CASE WHEN month = 'Feb' THEN sales_amount ELSE 0 END) AS feb,\n  SUM(CASE WHEN month = 'Mar' THEN sales_amount ELSE 0 END) AS mar,\n  SUM(CASE WHEN month = 'Apr' THEN sales_amount ELSE 0 END) AS apr,\n  SUM(CASE WHEN month = 'May' THEN sales_amount ELSE 0 END) AS may,\n  SUM(CASE WHEN month = 'Jun' THEN sales_amount ELSE 0 END) AS jun,\n  SUM(CASE WHEN month = 'Jul' THEN sales_amount ELSE 0 END) AS jul,\n  SUM(CASE WHEN month = 'Aug' THEN sales_amount ELSE 0 END) AS aug,\n  SUM(CASE WHEN month = 'Sep' THEN sales_amount ELSE 0 END) AS sep,\n  SUM(CASE WHEN month = 'Oct' THEN sales_amount ELSE 0 END) AS oct,\n  SUM(CASE WHEN month = 'Nov' THEN sales_amount ELSE 0 END) AS nov,\n  SUM(CASE WHEN month = 'Dec' THEN sales_amount ELSE 0 END) AS `dec`\nFROM monthly_sales\nGROUP BY year\nORDER BY year;\n\n-- Dynamic PIVOT using prepared statements\nSET @sql = NULL;\n\nSELECT\n  GROUP_CONCAT(DISTINCT\n    CONCAT(\n      'SUM(CASE WHEN month = ''',\n      month,\n      ''' THEN sales_amount ELSE 0 END) AS `',\n      month, '`'\n    )\n  ) INTO @sql\nFROM monthly_sales;\n\nSET @sql = CONCAT(\n  'SELECT year, ',\n  @sql,\n  ' FROM monthly_sales GROUP BY year ORDER BY year'\n);\n\nPREPARE stmt FROM @sql;\nEXECUTE stmt;\nDEALLOCATE PREPARE stmt;\n\n-- UNPIVOT using UNION ALL\nSELECT year, 'Q1' AS quarter, q1 AS sales_amount FROM quarterly_sales\nUNION ALL\nSELECT year, 'Q2', q2 FROM quarterly_sales\nUNION ALL\nSELECT year, 'Q3', q3 FROM quarterly_sales\nUNION ALL\nSELECT year, 'Q4', q4 FROM quarterly_sales\nORDER BY year, quarter;\n\n-- Product comparison matrix\nSELECT \n  product_name,\n  MAX(CASE WHEN attribute_name = 'Price' THEN attribute_value END) AS price,\n  MAX(CASE WHEN attribute_name = 'Weight' THEN attribute_value END) AS weight,\n  MAX(CASE WHEN attribute_name = 'Color' THEN attribute_value END) AS color,\n  MAX(CASE WHEN attribute_name = 'Size' THEN attribute_value END) AS size\nFROM product_attributes\nGROUP BY product_name;\n\n-- Sales by region and product category\nSELECT \n  product_category,\n  SUM(CASE WHEN region = 'North' THEN sales_amount ELSE 0 END) AS north_sales,\n  SUM(CASE WHEN region = 'South' THEN sales_amount ELSE 0 END) AS south_sales,\n  SUM(CASE WHEN region = 'East' THEN sales_amount ELSE 0 END) AS east_sales,\n  SUM(CASE WHEN region = 'West' THEN sales_amount ELSE 0 END) AS west_sales,\n  SUM(sales_amount) AS total_sales\nFROM sales\nGROUP BY product_category\nORDER BY total_sales DESC;\n\n-- Year-over-year comparison\nSELECT \n  month,\n  SUM(CASE WHEN YEAR(order_date) = 2022 THEN order_total ELSE 0 END) AS sales_2022,\n  SUM(CASE WHEN YEAR(order_date) = 2023 THEN order_total ELSE 0 END) AS sales_2023,\n  SUM(CASE WHEN YEAR(order_date) = 2024 THEN order_total ELSE 0 END) AS sales_2024\nFROM orders\nGROUP BY month\nORDER BY FIELD(month, 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');"
    }
  }
}
