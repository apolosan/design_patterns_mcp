{
  "id": "write-behind-cache-perf",
  "name": "Write-Behind Cache",
  "category": "Performance",
  "description": "Writes to cache immediately and to storage asynchronously for better write performance",
  "when_to_use": "Write-heavy workloads\nWrite performance\nBatch processing",
  "benefits": "Write performance\nBatch efficiency\nReduced write load",
  "drawbacks": "Data loss risk\nComplexity\nEventual consistency",
  "use_cases": "High-throughput writes\nLogging systems\nAnalytics data",
  "complexity": "High",
  "tags": [
    "performance",
    "caching",
    "async"
  ],
  "examples": {
    "typescript": {
      "language": "typescript",
      "code": "// Write-Behind Cache: async writes for performance\nclass WriteBehindCache<K, V> {\n  private cache = new Map<K, V>();\n  private dirtyKeys = new Set<K>();\n  private flushInterval: NodeJS.Timeout;\n  \n  constructor(\n    private storage: Storage<K, V>,\n    private flushIntervalMs = 5000\n  ) {\n    this.flushInterval = setInterval(() => this.flush(), flushIntervalMs);\n  }\n  \n  async get(key: K): Promise<V | undefined> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    \n    const value = await this.storage.read(key);\n    if (value !== undefined) {\n      this.cache.set(key, value);\n    }\n    return value;\n  }\n  \n  set(key: K, value: V): void {\n    this.cache.set(key, value);\n    this.dirtyKeys.add(key);\n  }\n  \n  private async flush(): Promise<void> {\n    if (this.dirtyKeys.size === 0) return;\n    \n    const keysToFlush = Array.from(this.dirtyKeys);\n    this.dirtyKeys.clear();\n    \n    const writes = keysToFlush.map(async (key) => {\n      const value = this.cache.get(key)!;\n      await this.storage.write(key, value);\n    });\n    \n    await Promise.all(writes);\n    console.log('Flushed ' + keysToFlush.length + ' entries');\n  }\n  \n  async shutdown(): Promise<void> {\n    clearInterval(this.flushInterval);\n    await this.flush();\n  }\n}\n\nconst cache = new WriteBehindCache(storage, 5000);\ncache.set('key1', 'value1'); // Fast, no I/O\ncache.set('key2', 'value2'); // Fast, no I/O\n// Writes happen async after 5s"
    }
  }
}