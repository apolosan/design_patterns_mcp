{
  "id": "data-mapper-pattern",
  "name": "Data Mapper",
  "category": "Data Access",
  "description": "Layer that moves data between objects and database while keeping them independent",
  "when_to_use": "Domain model independence\nComplex mappings\nLegacy databases",
  "benefits": "Independence\nFlexibility\nTesting\nDomain focus",
  "drawbacks": "Complex implementation\nPerformance overhead\nLearning curve",
  "use_cases": "Domain-driven design\nLegacy integration\nComplex mappings",
  "complexity": "High",
  "tags": [
    "data-access",
    "mapping",
    "independence"
  ],
  "examples": {
    "typescript": {
      "language": "typescript",
      "code": "// Data Mapper: separate domain objects from persistence\nclass User {\n  constructor(\n    public id: string,\n    public email: string,\n    public profile: UserProfile\n  ) {}\n  \n  changeEmail(newEmail: string) {\n    this.email = newEmail;\n  }\n}\n\nclass UserProfile {\n  constructor(\n    public firstName: string,\n    public lastName: string\n  ) {}\n}\n\nclass UserMapper {\n  toDomain(row: any): User {\n    return new User(\n      row.id,\n      row.email,\n      new UserProfile(row.first_name, row.last_name)\n    );\n  }\n  \n  toPersistence(user: User): any {\n    return {\n      id: user.id,\n      email: user.email,\n      first_name: user.profile.firstName,\n      last_name: user.profile.lastName\n    };\n  }\n}\n\nclass UserRepository {\n  constructor(\n    private db: Database,\n    private mapper: UserMapper\n  ) {}\n  \n  async findById(id: string): Promise<User | null> {\n    const row = await this.db.query('SELECT * FROM users WHERE id = $1', [id]);\n    return row ? this.mapper.toDomain(row) : null;\n  }\n  \n  async save(user: User): Promise<void> {\n    const data = this.mapper.toPersistence(user);\n    await this.db.query('INSERT INTO users (...) VALUES (...)', Object.values(data));\n  }\n}"
    }
  }
}