{
  "category": "Sustainable Blockchain",
  "description": "Sustainable Blockchain design patterns for blockchain and Web3 applications",
  "patterns": [
    {
      "id": "carbon-credit-tokenization",
      "name": "Carbon Credit Tokenization",
      "category": "Sustainable Blockchain",
      "description": "Transparent carbon offset trading via tokenized credits. Blockchain-verified carbon retirement.",
      "when_to_use": [
        "Corporate sustainability",
        "carbon markets",
        "offset verification"
      ],
      "benefits": [
        "Transparent tracking",
        "global access",
        "automated retirement",
        "fraud prevention"
      ],
      "drawbacks": [
        "Carbon credit quality verification challenges",
        "additionality concerns"
      ],
      "use_cases": [
        "KlimaDAO",
        "Toucan Protocol",
        "Moss.Earth",
        "carbon markets"
      ],
      "complexity": "High",
      "tags": [
        "sustainable",
        "carbon",
        "tokenization",
        "climate",
        "offsets"
      ],
      "examples": {
        "solidity": {
          "language": "solidity",
          "code": "// Carbon credit tokenization (Toucan Protocol model)\ncontract CarbonToken is ERC20 {\n    struct CarbonCredit {\n        string projectId;        // Verra/Gold Standard ID\n        uint256 vintage;         // Year generated\n        string methodology;      // e.g., \"VM0042\"\n        bytes32 serialNumber;\n        bool retired;\n    }\n    \n    mapping(uint256 => CarbonCredit) public credits;\n    \n    function bridgeCredit(CarbonCredit memory credit) external onlyVerifier {\n        // Bridge off-chain carbon credit on-chain\n        _mint(msg.sender, 1 ether); // 1 token = 1 tCO2e\n        credits[nextTokenId] = credit;\n    }\n    \n    function retire(uint256 amount, address beneficiary) external {\n        _burn(msg.sender, amount);\n        emit CarbonRetired(msg.sender, beneficiary, amount);\n        // Permanently removed from circulation = carbon offset\n    }\n}"
        }
      }
    },
    {
      "id": "green-blockchain-patterns",
      "name": "Green Blockchain Patterns",
      "category": "Sustainable Blockchain",
      "description": "Carbon-neutral or carbon-negative blockchain operations. Built-in offset mechanisms.",
      "when_to_use": [
        "Sustainable crypto",
        "green NFTs",
        "climate-positive protocols"
      ],
      "benefits": [
        "Net zero or negative emissions",
        "positive branding",
        "sustainable"
      ],
      "drawbacks": [
        "Ongoing offset costs",
        "verification overhead"
      ],
      "use_cases": [
        "Algorand (carbon negative)",
        "Tezos (green)",
        "Celo"
      ],
      "complexity": "Medium",
      "tags": [
        "sustainable",
        "green",
        "carbon-negative",
        "climate",
        "offset"
      ],
      "examples": {
        "solidity": {
          "language": "solidity",
          "code": "// Green NFT with built-in carbon offset\ncontract GreenNFT is ERC721 {\n    uint256 public constant OFFSET_PER_MINT = 0.01 ether; // KlimaDAO tokens\n    IKlimaRetire public klimaRetire;\n    \n    function mint(address to, uint256 tokenId) external payable {\n        require(msg.value >= MINT_PRICE + OFFSET_PER_MINT);\n        \n        // Mint NFT\n        _mint(to, tokenId);\n        \n        // Retire carbon credits automatically\n        klimaRetire.retireCarbon{value: OFFSET_PER_MINT}(\n            beneficiary: to,\n            amount: calculateFootprint(tokenId) // Based on estimated NFT footprint\n        );\n        \n        emit CarbonNeutralMint(tokenId, to);\n    }\n}"
        }
      }
    },
    {
      "id": "pos-energy-efficiency",
      "name": "Proof of Stake Energy Efficiency",
      "category": "Sustainable Blockchain",
      "description": "Replace energy-intensive PoW with PoS. 99.95% energy reduction.",
      "when_to_use": [
        "Sustainable blockchains",
        "energy-efficient consensus"
      ],
      "benefits": [
        "99.95% less energy than PoW",
        "sustainable",
        "lower operating costs"
      ],
      "drawbacks": [
        "Different security model (nothing at stake)",
        "wealth concentration"
      ],
      "use_cases": [
        "Ethereum (post-Merge)",
        "Cardano",
        "Polkadot",
        "most modern chains"
      ],
      "complexity": "High",
      "tags": [
        "sustainable",
        "pos",
        "energy",
        "ethereum",
        "consensus"
      ],
      "examples": {
        "solidity": {
          "language": "solidity",
          "code": "// Ethereum PoS: Beacon chain consensus\n// Energy comparison:\n// PoW (Ethereum pre-Merge): ~94 TWh/year (≈ Netherlands)\n// PoS (Ethereum post-Merge): ~0.01 TWh/year (≈ small town)\n\n// PoS validator (conceptual)\ncontract PoSValidator {\n    uint256 public constant MIN_STAKE = 32 ether;\n    \n    function stake() external payable {\n        require(msg.value >= MIN_STAKE);\n        // Validator selected randomly, weighted by stake\n        // No mining, no energy waste\n    }\n    \n    function propose(bytes32 blockRoot) external onlySelected {\n        // Propose block if randomly selected\n        // Attesters vote on validity\n    }\n}"
        }
      }
    }
  ]
}