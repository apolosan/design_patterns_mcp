{
  "id": "safe-concurrency-exclusive-ownership",
  "name": "Safe Concurrency with Exclusive Ownership",
  "category": "Concurrency",
  "description": "Avoiding the need for runtime concurrent mechanisms through exclusive ownership",
  "when_to_use": "Memory safety\nThread safety\nPerformance optimization\nLock-free algorithms",
  "benefits": "No data races\nNo locks needed\nBetter performance\nMemory safety",
  "drawbacks": "Ownership complexity\nBorrow checker overhead\nLearning curve\nCode complexity",
  "use_cases": "Resource management\nState machines\nLock-free data structures\nMemory-safe systems",
  "complexity": "High",
  "tags": ["concurrency", "ownership", "memory-safety", "lock-free", "rust-patterns"],
  "examples": {
    "typescript": {
      "language": "typescript",
      "code": "// Safe Concurrency with Exclusive Ownership Pattern\n// Avoiding runtime concurrent mechanisms through exclusive ownership\n\n// Resource with exclusive ownership\nclass ExclusiveResource {\n  private value: number;\n  private owner: string | null = null;\n\n  constructor(initialValue: number) {\n    this.value = initialValue;\n  }\n\n  // Acquire exclusive ownership\n  acquire(owner: string): boolean {\n    if (this.owner === null) {\n      this.owner = owner;\n      console.log(`${owner} acquired resource`);\n      return true;\n    }\n    return false;\n  }\n\n  // Release ownership\n  release(owner: string): boolean {\n    if (this.owner === owner) {\n      this.owner = null;\n      console.log(`${owner} released resource`);\n      return true;\n    }\n    return false;\n  }\n\n  // Access resource (only by owner)\n  access(owner: string, operation: (value: number) => number): number | null {\n    if (this.owner === owner) {\n      this.value = operation(this.value);\n      return this.value;\n    }\n    return null;\n  }\n\n  // Get current value (read-only)\n  getValue(): number {\n    return this.value;\n  }\n\n  // Check if owned\n  isOwned(): boolean {\n    return this.owner !== null;\n  }\n\n  // Get current owner\n  getOwner(): string | null {\n    return this.owner;\n  }\n}\n\n// Usage example\nasync function demonstrateExclusiveOwnership() {\n  const resource = new ExclusiveResource(0);\n\n  console.log('Initial state:', {\n    value: resource.getValue(),\n    owned: resource.isOwned(),\n    owner: resource.getOwner()\n  });\n\n  // Thread/Worker 1 tries to acquire\n  const acquired1 = resource.acquire('Worker1');\n  console.log('Worker1 acquired:', acquired1);\n\n  if (acquired1) {\n    // Worker1 modifies the resource\n    const newValue = resource.access('Worker1', (val) => val + 10);\n    console.log('Worker1 modified value to:', newValue);\n\n    // Worker1 releases\n    resource.release('Worker1');\n  }\n\n  // Thread/Worker 2 tries to acquire\n  const acquired2 = resource.acquire('Worker2');\n  console.log('Worker2 acquired:', acquired2);\n\n  if (acquired2) {\n    // Worker2 modifies the resource\n    const finalValue = resource.access('Worker2', (val) => val * 2);\n    console.log('Worker2 modified value to:', finalValue);\n\n    // Worker2 releases\n    resource.release('Worker2');\n  }\n}\n\n// Run the demonstration\ndemonstrateExclusiveOwnership();\n\n// Advanced example: Transferring ownership\nclass OwnershipTransfer {\n  private data: string;\n  private owner: string | null;\n\n  constructor(data: string, initialOwner: string) {\n    this.data = data;\n    this.owner = initialOwner;\n  }\n\n  // Transfer ownership to new owner\n  transferOwnership(newOwner: string): boolean {\n    if (this.owner !== null) {\n      console.log(`Transferring ownership from ${this.owner} to ${newOwner}`);\n      this.owner = newOwner;\n      return true;\n    }\n    return false;\n  }\n\n  // Process data (only by current owner)\n  processByOwner(owner: string): string | null {\n    if (this.owner === owner) {\n      return `Processed: ${this.data.toUpperCase()}`;\n    }\n    return null;\n  }\n}\n\n// Demonstrate ownership transfer\nconst transferExample = new OwnershipTransfer('hello world', 'Alice');\nconsole.log('Alice processes:', transferExample.processByOwner('Alice'));\n\n// Transfer to Bob\ntransferExample.transferOwnership('Bob');\nconsole.log('Bob processes:', transferExample.processByOwner('Bob'));\nconsole.log('Alice tries to process:', transferExample.processByOwner('Alice'));"
    }
  }
}
