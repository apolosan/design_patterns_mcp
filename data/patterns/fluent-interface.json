{
  "id": "fluent-interface",
  "name": "Fluent Interface",
  "category": "Behavioral",
  "description": "Design an API to be method chained so that it reads like a DSL",
  "when_to_use": "Readable APIs\nMethod chaining\nDSL creation\nConfiguration builders",
  "benefits": "Readable code\nMethod chaining\nDSL-like syntax\nExpressive APIs",
  "drawbacks": "Implementation complexity\nDebugging difficulty\nReturn type management",
  "use_cases": "Query builders\nConfiguration objects\nTest data builders\nAPI design",
  "complexity": "Medium",
  "tags": ["behavioral", "fluent-interface", "method-chaining", "dsl", "api-design"],
  "examples": {
    "typescript": {
      "language": "typescript",
      "code": "// Fluent Interface Pattern\n// Creates method chaining for readable, DSL-like APIs\n\n// Query Builder Example\nclass QueryBuilder {\n  private selectFields: string[] = [];\n  private fromTable: string = '';\n  private whereConditions: string[] = [];\n  private orderByFields: string[] = [];\n  private limitCount?: number;\n\n  // Entry point - returns this for chaining\n  static select(...fields: string[]): QueryBuilder {\n    const builder = new QueryBuilder();\n    builder.selectFields = fields;\n    return builder;\n  }\n\n  from(table: string): this {\n    this.fromTable = table;\n    return this;\n  }\n\n  where(condition: string): this {\n    this.whereConditions.push(condition);\n    return this;\n  }\n\n  orderBy(...fields: string[]): this {\n    this.orderByFields = fields;\n    return this;\n  }\n\n  limit(count: number): this {\n    this.limitCount = count;\n    return this;\n  }\n\n  // Terminal operation - executes the query\n  execute(): string {\n    let query = `SELECT ${this.selectFields.join(', ')}`;\n    query += ` FROM ${this.fromTable}`;\n\n    if (this.whereConditions.length > 0) {\n      query += ` WHERE ${this.whereConditions.join(' AND ')}`;\n    }\n\n    if (this.orderByFields.length > 0) {\n      query += ` ORDER BY ${this.orderByFields.join(', ')}`;\n    }\n\n    if (this.limitCount) {\n      query += ` LIMIT ${this.limitCount}`;\n    }\n\n    return query;\n  }\n}\n\n// Usage - reads like natural language\nconst query = QueryBuilder\n  .select('id', 'name', 'email')\n  .from('users')\n  .where('age > 18')\n  .where('status = \"active\"')\n  .orderBy('name')\n  .limit(10)\n  .execute();\n\nconsole.log(query);\n// Output: SELECT id, name, email FROM users WHERE age > 18 AND status = \"active\" ORDER BY name LIMIT 10\n\n// Configuration Builder Example\nclass DatabaseConfig {\n  private host: string = 'localhost';\n  private port: number = 5432;\n  private database: string = 'default';\n  private username: string = '';\n  private password: string = '';\n  private ssl: boolean = false;\n  private connectionTimeout: number = 5000;\n\n  static create(): DatabaseConfig {\n    return new DatabaseConfig();\n  }\n\n  setHost(host: string): this {\n    this.host = host;\n    return this;\n  }\n\n  setPort(port: number): this {\n    this.port = port;\n    return this;\n  }\n\n  setDatabase(database: string): this {\n    this.database = database;\n    return this;\n  }\n\n  setCredentials(username: string, password: string): this {\n    this.username = username;\n    this.password = password;\n    return this;\n  }\n\n  enableSSL(): this {\n    this.ssl = true;\n    return this;\n  }\n\n  setConnectionTimeout(timeout: number): this {\n    this.connectionTimeout = timeout;\n    return this;\n  }\n\n  build(): DatabaseConnection {\n    return new DatabaseConnection({\n      host: this.host,\n      port: this.port,\n      database: this.database,\n      username: this.username,\n      password: this.password,\n      ssl: this.ssl,\n      connectionTimeout: this.connectionTimeout\n    });\n  }\n}\n\n// Usage\nconst config = DatabaseConfig\n  .create()\n  .setHost('prod-db.example.com')\n  .setPort(5432)\n  .setDatabase('production')\n  .setCredentials('admin', 'secret123')\n  .enableSSL()\n  .setConnectionTimeout(10000)\n  .build();\n\n// Test Data Builder Example\nclass UserBuilder {\n  private user: any = {\n    id: '',\n    name: '',\n    email: '',\n    age: 0,\n    role: 'user',\n    preferences: {},\n    createdAt: new Date()\n  };\n\n  static create(): UserBuilder {\n    return new UserBuilder();\n  }\n\n  withId(id: string): this {\n    this.user.id = id;\n    return this;\n  }\n\n  withName(name: string): this {\n    this.user.name = name;\n    return this;\n  }\n\n  withEmail(email: string): this {\n    this.user.email = email;\n    return this;\n  }\n\n  withAge(age: number): this {\n    this.user.age = age;\n    return this;\n  }\n\n  asAdmin(): this {\n    this.user.role = 'admin';\n    return this;\n  }\n\n  withPreferences(prefs: any): this {\n    this.user.preferences = { ...this.user.preferences, ...prefs };\n    return this;\n  }\n\n  createdDaysAgo(days: number): this {\n    this.user.createdAt = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n    return this;\n  }\n\n  build(): any {\n    return { ...this.user };\n  }\n}\n\n// Usage for testing\nconst testUser = UserBuilder\n  .create()\n  .withId('user-123')\n  .withName('John Doe')\n  .withEmail('john@example.com')\n  .withAge(30)\n  .asAdmin()\n  .withPreferences({ theme: 'dark', notifications: true })\n  .createdDaysAgo(7)\n  .build();\n\n// HTTP Client Example\nclass HttpClient {\n  private baseUrl: string = '';\n  private headers: Record<string, string> = {};\n  private timeout: number = 5000;\n\n  static create(): HttpClient {\n    return new HttpClient();\n  }\n\n  baseUrl(url: string): this {\n    this.baseUrl = url;\n    return this;\n  }\n\n  header(key: string, value: string): this {\n    this.headers[key] = value;\n    return this;\n  }\n\n  timeout(ms: number): this {\n    this.timeout = ms;\n    return this;\n  }\n\n  async get(path: string): Promise<any> {\n    const url = `${this.baseUrl}${path}`;\n    const response = await fetch(url, {\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout)\n    });\n    return response.json();\n  }\n\n  async post(path: string, data: any): Promise<any> {\n    const url = `${this.baseUrl}${path}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        ...this.headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout)\n    });\n    return response.json();\n  }\n}\n\n// Usage\nconst api = HttpClient\n  .create()\n  .baseUrl('https://api.example.com')\n  .header('Authorization', 'Bearer token123')\n  .header('X-API-Version', 'v1')\n  .timeout(10000);\n\n// Make requests\nconst users = await api.get('/users');\nconst newUser = await api.post('/users', { name: 'John', email: 'john@example.com' });"
    }
  }
}
