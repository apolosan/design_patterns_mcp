{
  "id": "write-through-cache-perf",
  "name": "Write-Through Cache",
  "category": "Performance",
  "description": "Writes data to cache and storage simultaneously for consistency",
  "when_to_use": "Data consistency\nWrite performance\nCache reliability",
  "benefits": "Data consistency\nCache reliability\nRead performance",
  "drawbacks": "Write latency\nImplementation complexity\nResource overhead",
  "use_cases": "Critical data\nConsistent reads\nReliable caching",
  "complexity": "High",
  "tags": [
    "performance",
    "caching",
    "consistency"
  ],
  "examples": {
    "typescript": {
      "language": "typescript",
      "code": "// Write-Through Cache: synchronous consistency\nclass WriteThroughCache<K, V> {\n  private cache = new Map<K, V>();\n  \n  constructor(private storage: Storage<K, V>) {}\n  \n  async get(key: K): Promise<V | undefined> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    \n    const value = await this.storage.read(key);\n    if (value !== undefined) {\n      this.cache.set(key, value);\n    }\n    return value;\n  }\n  \n  async set(key: K, value: V): Promise<void> {\n    await this.storage.write(key, value);\n    this.cache.set(key, value);\n  }\n  \n  async delete(key: K): Promise<void> {\n    await this.storage.delete(key);\n    this.cache.delete(key);\n  }\n  \n  invalidate(key: K): void {\n    this.cache.delete(key);\n  }\n  \n  clear(): void {\n    this.cache.clear();\n  }\n}\n\nconst cache = new WriteThroughCache(storage);\nawait cache.set('key', 'value'); // Slower, but consistent"
    }
  }
}